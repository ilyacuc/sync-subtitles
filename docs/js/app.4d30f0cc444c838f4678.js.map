{"version":3,"sources":["webpack:///./src/main.js"],"names":["TRASHOLD","readFileAsText","inputFile","temporaryFileReader","FileReader","__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_promise___default","a","resolve","reject","onerror","abort","DOMException","onload","result","readAsText","normalizeArrays","arr1","arr2","forEach","_ref","start","end","find","item","push","text","sort","b","files","startTs","offset","intervalId","timingNodes","timingNodesInversed","isScrolling","isPlaying","onPlayClick","length","Date","getTime","window","setInterval","loop","onStop","console","log","clearInterval","position","_ref2","element","scrollIntoView","behavior","block","nextElementSibling","classList","add","document","getElementById","addEventListener","e","_files","target","apply","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_toConsumableArray___default","then","parse","fragment","createDocumentFragment","index","el","createElement","className","id","innerText","s","pad","n","z","slice","ms","secs","mins","msToTime","innerHTML","append","concat","reverse","textElements","querySelectorAll","render","value","shouldRestart","_ref3","top","getBoundingClientRect","innerHeight"],"mappings":"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","file":"js/app.4d30f0cc444c838f4678.js","sourcesContent":["import { parse } from 'subtitle';\n\nfunction msToTime(s) {\n\n    // Pad to 2 or 3 digits, default is 2\n    function pad(n, z) {\n        z = z || 2;\n        return ('00' + n).slice(-z);\n    }\n\n    var ms = s % 1000;\n    s = (s - ms) / 1000;\n    var secs = s % 60;\n    s = (s - secs) / 60;\n    var mins = s % 60;\n    var hrs = (s - mins) / 60;\n\n    return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n}\n\nconst TRASHOLD = 1000;\nconst readFileAsText = (inputFile) => {\n    const temporaryFileReader = new FileReader();\n\n    return new Promise((resolve, reject) => {\n        temporaryFileReader.onerror = () => {\n            temporaryFileReader.abort();\n            reject(new DOMException(\"Problem parsing input file.\"));\n        };\n\n        temporaryFileReader.onload = () => {\n            resolve(temporaryFileReader.result);\n        };\n        temporaryFileReader.readAsText(inputFile);\n    });\n};\n\nfunction normalizeArrays(arr1, arr2) {\n    arr1.forEach(({ start, end }) => {\n        const match = arr2.find(item => {\n            return start >= item.start - TRASHOLD && start <= item.start + TRASHOLD && end >= item.end - TRASHOLD && end <= item.end + TRASHOLD;\n        });\n\n        if (!match) {\n            arr2.push({ start, end, text: '' });\n        }\n    })\n\n    arr2.sort((a, b) => a.start - b.start);\n}\n\nlet files = [];\n\nfunction onFileChange(e) {\n\n    let arr1 = [];\n    let arr2 = [];\n\n    if (e.target.files.length >= 2) {\n        files = [...e.target.files];\n    } else {\n        files.push(...e.target.files);\n    }\n\n    if (files.length >= 2) {\n        readFileAsText(files[0])\n            .then(result => {\n                arr1 = parse(result);\n                return readFileAsText(files[1])\n            })\n            .then(result => {\n                    arr2 = parse(result);\n\n                    normalizeArrays(arr1, arr2);\n                    normalizeArrays(arr2, arr1);\n                    console.log(arr1, arr2);\n                    render(arr1, arr2);\n                }\n            )\n    }\n    e.target.value = '';\n}\n\nlet startTs = 0;\nlet offset = 47297;\nlet intervalId;\nconst timingNodes = [];\nlet timingNodesInversed;\nlet textElements;\nlet isScrolling = false;\nlet isPlaying = false;\n\nfunction render(arr1, arr2) {\n    const fragment = document.createDocumentFragment();\n    arr1.forEach((item, index) => {\n        const el = document.createElement('div');\n        el.className = 'time';\n        el.id = 'time_' + index;\n        el.innerText = msToTime(item.start);\n        const text = document.createElement('div');\n        text.className = 'text';\n        text.innerHTML = `<span>${item.text}</span><span>${arr2[index].text}</span>`;\n        fragment.append(el, text);\n        timingNodes.push({ element: el, start: item.start });\n    })\n\n    timingNodesInversed = [...timingNodes].reverse();\n    textElements = [...document.querySelectorAll('.text')];\n    document.getElementById('app').append(fragment);\n    console.log(timingNodesInversed);\n}\n\nfunction onPlayClick() {\n    if (!timingNodes.length) {\n        return;\n    }\n    isPlaying = true;\n    startTs = new Date().getTime() - offset;\n    intervalId = window.setInterval(loop, 1000);\n}\n\nfunction onStop() {\n    console.log('stop');\n    isPlaying = false;\n    window.clearInterval(intervalId);\n}\n\nfunction loop() {\n    isScrolling = false;\n    const position = new Date().getTime() - startTs;\n    const item = timingNodesInversed.find(({ start }) => position >= start);\n    console.log(position, offset, item);\n    if (item && offset !== item.start) {\n        offset = item.start;\n        isScrolling = true;\n        item.element.scrollIntoView({ behavior: 'smooth', block: 'center' })\n        item.element.nextElementSibling.classList.add('active');\n\n    }\n}\n\nfunction clearActive() {\n    textElements.forEach(element => element.classList.remove('active'));\n}\n\nfunction onScroll(e) {\n    if (isScrolling) {\n        return;\n    }\n    let shouldRestart = isPlaying;\n    //clearActive();\n    console.log(e);\n    if (isPlaying) {\n        onStop();\n    }\n    const item = timingNodesInversed.find(({ element }) => {\n        const top = element.getBoundingClientRect().top;\n        return top > 0 && top < window.innerHeight / 2;\n    });\n    if (item) {\n        console.log(item);\n        offset = item.start;\n        item.element.nextElementSibling.classList.add('active');\n    }\n    if (shouldRestart) {\n        onPlayClick();\n    }\n}\n\ndocument.getElementById('file').addEventListener('change', onFileChange);\ndocument.getElementById('play').addEventListener('click', onPlayClick)\ndocument.getElementById('pause').addEventListener('click', onStop)\nwindow.addEventListener('touchstart', () => isScrolling = false)\nwindow.addEventListener('scroll', onScroll);\n\n\n// WEBPACK FOOTER //\n// ./src/main.js"],"sourceRoot":""}